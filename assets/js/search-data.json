{
  
    
        "post0": {
            "title": "Preventing a Hard Rain's Fall: the Persisting Threat of Nuclear Weapons",
            "content": "Preventing a Hard Rain&#39;s Fall: the Persisting Threat of Nuclear Weapons . Date: March 21, 2022 . Name: Yana Demeshko, M.A. . About the author . Yana Demeshko is a PhD Student at University of California, Los Angeles specializing in Slavic, East European and Eurasian Languages and Cultures while also pursuing a graduate certificate in Digital Humanities. This project is therefore part of her DH seminar titled Coding for Humanities. . Introduction and about the project . This final project is part of a larger research question surrounding the renewed concerns associated with nuclear arms proliferation, specifically targeting the issue of decaying nuclear deterrence and disarmament structure. At the present, the two countries that hold approximately 90% of all nuclear weapons, the U.S. and Russia, are seeing their relations deteriorate to the lowest point since the end of the Cold War. Although on January 3rd, 2022, China, France, Russia, the U.K. and the U.S. issued a joint statement proclaiming that . a nuclear war cannot be won and must never be fought, . matters around diminishing nuclear weapons reduction commitments continue to persist. . In an age of heightened geopolitical escalation between NATO and Russia, especially since Russia again invaded Ukraine on February 24, 2022, and worsening relations between the U.S. and China, a perception of lowered threshold for the use of nuclear weapons is alarming. This project seeks to track historical changes in nuclear arsenals of the U.S. and Russia, note how these changes correspond to various global and bilateral treaties, and assess the possible scope of the next U.S.-Russia treaty on nuclear nonproliferation. . Data . This project will draw from several sets of data. First, Arms Control Association has a helpful fact sheet that shows &quot;Nuclear Weapons: Who has What at a Glance.&quot; Drawing from this information, it is possible to present the data in a form of a map. Secondly, I have used the data presented in Federation of American Scientists&#39;s publication &quot;Status of World Nuclear Forces&quot; in order to create a stacked bar chart as well as line graph outlining the change in nuclear arsenal between 1945 and 2022. Finally, I have used Bulletin of the Atomic Scientists&#39;s data publications of nuclear forces by country by year as well as CSIS&#39;s missile defense project titled Missle Threat that also offers a valuable distribution of missles by country at the moment. This data was useful when creating a horizontal bar chart that compares nuclear bombs by their yields measured in kilotons. . Results and analysis . The map of nuclear weapon holding states . The map below shows which countries own nuclear weapons and how many warheads each of those states possess. Out of the nine countries represented, five are officially recognized by the Treaty on the Non-Proliferation of Nuclear Weapons (NPT) as nuclear weapon states: China, France, Russia, the United Kingdom, and the United States (highlighted in green). The rest, India, Israel, North Korea, and Pakistan, are not members of the NPT and are therefore not officially recognized. . Additionally, the map highlights the disparity in the number of nuclear warheads between Russia and the US versus the rest of the world. Although both countries have made considerable progress in limiting the number of warheads each of them has as part of its arsenal, more work remains to be done. . import pandas as pd import folium from folium import plugins . df = pd.DataFrame({&#39;country&#39;:[&#39;China&#39;,&#39;France&#39;,&#39;Russia&#39;,&#39;United Kingdom&#39;,&#39;United States of America&#39;,&#39;India&#39;,&#39;Israel&#39;,&#39;Pakistan&#39;, &#39;North Korea&#39;], &#39;iso_alpha&#39;:[&#39;CHN&#39;,&#39;FRA&#39;,&#39;RUS&#39;,&#39;GBR&#39;,&#39;USA&#39;,&#39;IND&#39;,&#39;ISR&#39;,&#39;PAK&#39;, &#39;PRK&#39;], &#39;lat&#39;:[35.86166, 46.227638, 61.52401, 55.378051, 37.09024, 20.593684, 31.046051, 30.375321, 40.339852], &#39;lng&#39;:[104.195397, 2.213749, 105.318756, -3.435973, -95.712891, 78.96288, 34.851612, 69.345116, 127.510093], &#39;counts&#39;:[350, 290, 6257, 225, 5550, 156, 90, 165, 20]}) . for lat, lon, name, counts in zip(df[&#39;lat&#39;],df[&#39;lng&#39;],df[&#39;country&#39;],df[&#39;counts&#39;]): #Creating the marker folium.Marker( location=[35.86166, 104.195397], popup=&quot;China: 350, NPT Recognized Nuclear-Weapon State&quot;, icon=folium.Icon(color=&quot;green&quot;), ).add_to(m) folium.Marker( location=[46.227638, 2.213749], popup=&quot;France: 290, NPT Recognized Nuclear-Weapon State&quot;, icon=folium.Icon(color=&quot;green&quot;), ).add_to(m) folium.Marker( location=[61.52401, 105.318756], popup=&quot;Russia: 6,257, NPT Recognized Nuclear-Weapon State&quot;, icon=folium.Icon(color=&quot;green&quot;), ).add_to(m) folium.Marker( location=[55.378051, -3.435973], popup=&quot;the UK: 225, NPT Recognized Nuclear-Weapon State&quot;, icon=folium.Icon(color=&quot;green&quot;), ).add_to(m) folium.Marker( location=[37.09024, -95.712891], popup=&quot;the US: 5,550, NPT Recognized Nuclear-Weapon State&quot;, icon=folium.Icon(color=&quot;green&quot;), ).add_to(m) folium.Marker( location=[20.593684, 78.96288], popup=&quot;India: 156, non-NPT Nuclear-Weapon Possessor&quot;, icon=folium.Icon(color=&quot;purple&quot;), ).add_to(m) folium.Marker( location=[31.046051, 34.851612], popup=&quot;Israel: 90, non-NPT Nuclear-Weapon Possessor&quot;, icon=folium.Icon(color=&quot;purple&quot;), ).add_to(m) folium.Marker( location=[30.375321, 69.345116], popup=&quot;Pakistan: 165, non-NPT Nuclear-Weapon Possessor&quot;, icon=folium.Icon(color=&quot;purple&quot;), ).add_to(m) folium.Marker( location=[40.339852, 127.510093], popup=&quot;North Korea: 20, non-NPT Nuclear-Weapon Possessor&quot;, icon=folium.Icon(color=&quot;purple&quot;), ).add_to(m) m m.save(&#39;mymapname.html&#39;) . from IPython.display import IFrame IFrame(src=&#39;./mymapname.html&#39;, width=700, height=600) . Global nuclear warhead arsenal for 2022 . The chart below addresses the arsenal of nuclear warheads held by each of the countries of interest. As noted above, Russia and the US are the largest holders of nuclear weapons but the graph is also a useful visualization of the kinds of weapons that are part of each countries arsenal. . import numpy as np import matplotlib.pyplot as plt . df = pd.read_csv(&#39;data/nuclear_inventories.csv&#39;) . plt.style.use(&#39;fivethirtyeight&#39;) df.plot(kind=&#39;bar&#39;, stacked=True) plt.xlabel(&#39;Country&#39;) plt.ylabel(&#39;Nuclear Warheads&#39;) plt.xticks(indx, countries) plt.title(&#39;Global Nuclear Warhead Arsenal, 2022&#39;) . Text(0.5, 1.0, &#39;Global Nuclear Warhead Arsenal, 2022&#39;) . Nuclear warhead arsenal excluding values for Russia and the US for 2022 . The below graph zeros in on data above by excluding values for Russia and the US, the largest holders of nuclear weapons (about 90s of all global arsenal). . df2 = df.drop( labels=[0,1], axis=0, inplace=False ) . df2 . Country Deployed / Strategic Deployed / Nonstrategic Reserve / Nondeployed Retired . 2 China | 0 | 0 | 350 | 0 | . 3 France | 280 | 0 | 10 | 0 | . 4 United Kingdom | 120 | 0 | 60 | 0 | . 5 Pakistan | 0 | 0 | 165 | 0 | . 6 India | 0 | 0 | 165 | 0 | . 7 Israel | 0 | 0 | 90 | 0 | . 8 North Korea | 0 | 0 | 20 | 0 | . df2.plot(kind=&#39;bar&#39;, stacked=True) plt.xlabel(&#39;Country&#39;) plt.ylabel(&#39;Nuclear Warheads&#39;) plt.xticks(indx2, [&#39;China&#39;, &#39;France&#39;, &#39;United Kingdom&#39;, &#39;Pakistan&#39;, &#39;India&#39;, &#39;Israel&#39;, &#39;North Korea&#39;]) plt.title(&#39;Nuclear Warhead Arsenal excluding Russia and the US, 2022&#39;) . Text(0.5, 1.0, &#39;Nuclear Warhead Arsenal excluding Russia and the US, 2022&#39;) . Global nuclear warhead arsenal between 1945 and 2022 . Since the present condition of global distribution of nuclear weapons is clear, it might be also useful to observe how nuclear arsenal has changed over time. The below chart provides a glimpse into the changes in not just nuclear weapons holding states but also in the number of weapons over time since 1945 all the way to 2022. The graph shows that in 1986, total number of nuclear warheads has reached an enormous quanity of 70,374 which is considerably higher than 12,705 today. . warheads = pd.read_csv(&#39;data/warheads_1945_2022.csv&#39;) . plt.figure(figsize=(13,9)) plt.style.use(&#39;fivethirtyeight&#39;) plt.plot(warheads.Year, warheads.Total,color=&#39;lightgrey&#39;, label=&#39;Total Arsenal&#39;) plt.plot(warheads.Year, warheads.US,color=&#39;cornflowerblue&#39;, label=&#39;US&#39;) plt.plot(warheads.Year, warheads.Russia,color=&#39;chocolate&#39;, label=&#39;Soviet Union/Russia&#39;) plt.plot(warheads.Year, warheads.China,color=&#39;orange&#39;, label=&#39;China&#39;) plt.plot(warheads.Year, warheads.France,color=&#39;steelblue&#39;, label=&#39;France&#39;) plt.plot(warheads.Year, warheads.UK,color=&#39;tomato&#39;, label=&#39;UK&#39;) plt.plot(warheads.Year, warheads[&#39;North Korea&#39;], &#39;c&#39;, label=&#39;North Korea&#39;) plt.plot(warheads.Year, warheads.Pakistan, &#39;m&#39;, label=&#39;Pakistan&#39;) plt.plot(warheads.Year, warheads.India, color=&#39;pink&#39;, label=&#39;India&#39;) plt.plot(warheads.Year, warheads.Israel,color=&#39;gold&#39;, label=&#39;Israel&#39;) plt.plot(warheads.Year, warheads[&#39;South Africa&#39;],color=&#39;yellowgreen&#39;, label=&#39;South Africa&#39;) #for country in warheads: #if country != &#39;Year&#39;: #plt.plot(warheads.Year, warheads[country]) plt.title(&#39;Global Nuclear Warhead Arsenal, 1945-2022&#39;) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Warheads&#39;) plt.axvline(x=1986, color=&#39;k&#39;, linestyle=&#39;--&#39;, linewidth=2) plt.text(1987, 70000, &#39;Total arsenal is 70,374&#39;) plt.legend() #plt.legend([&#39;Total Arsenal&#39;,&#39;Soviet Union/Russia&#39;, &#39;US&#39;, &#39;China&#39;, &#39;France&#39;, &#39;UK&#39;, &#39;Pakistan&#39;, &#39;India&#39;, &#39;Israel&#39;, #&#39;North Korea&#39;, &#39;South Africa&#39;]) current_values = plt.gca().get_yticks() plt.gca().set_yticklabels([&#39;{:,.0f}&#39;.format(x) for x in current_values]) . /tmp/ipykernel_125/2990990209.py:32: UserWarning: FixedFormatter should only be used together with FixedLocator plt.gca().set_yticklabels([&#39;{:,.0f}&#39;.format(x) for x in current_values]) . [Text(0, -10000.0, &#39;-10,000&#39;), Text(0, 0.0, &#39;0&#39;), Text(0, 10000.0, &#39;10,000&#39;), Text(0, 20000.0, &#39;20,000&#39;), Text(0, 30000.0, &#39;30,000&#39;), Text(0, 40000.0, &#39;40,000&#39;), Text(0, 50000.0, &#39;50,000&#39;), Text(0, 60000.0, &#39;60,000&#39;), Text(0, 70000.0, &#39;70,000&#39;), Text(0, 80000.0, &#39;80,000&#39;)] . Change in Russian and US arsenal from 1945 to 2022. . The visualization below is a more interactive way of representing changes in Russia&#39;s and the US&#39;s nuclear arsenals. . import altair as alt # make dataframe that has all countries condensed into single column # here I&#39;m just doing Russia &amp; US year = [] country = [] count = [] for i,row in warheads.iterrows(): year.append(row[&#39;Year&#39;]) country.append(&#39;Russia&#39;) count.append(row[&#39;Russia&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;US&#39;) count.append(row[&#39;US&#39;]) df2 = pd.DataFrame({&#39;year&#39;:year,&#39;country&#39;:country,&#39;count&#39;:count}) # make color scale pink_blue = alt.Scale(domain=(&#39;Russia&#39;, &#39;US&#39;), range=[&quot;steelblue&quot;, &quot;salmon&quot;]) # make slider from 1945 - 2022 # based on year column, default value 2000 slider = alt.binding_range(min=1945, max=2022, step=1) select_year = alt.selection_single(name=&quot;year&quot;, fields=[&#39;year&#39;], bind=slider, init={&#39;year&#39;: 2000}) # make plot and link it to the slider source = df2 alt.Chart(source).mark_bar().encode( x=alt.X(&#39;country:N&#39;, title=None), y=alt.Y(&#39;count:Q&#39;, scale=alt.Scale(domain=(0, 41000))), color=alt.Color(&#39;country:N&#39;, scale=pink_blue), column=&#39;year:O&#39; ).properties( width=75 ).add_selection( select_year ).transform_filter( select_year ) . Strategic nuclear arms control agreements between Russia and the US, 1945-2022 . The next chart tracks how Russian and the US&#39;s warhead counts responded to various strategic and nonstrategic (the INF Treaty) agreements between the two countries starting with the Strategic Arms Limitation Talks (SALT I) which produced the Anti-Ballistic Missile (ABM) Treaty and ending with the the New Strategic Arms Reduction Treaty (New START) which was extended in 2021 until 2026. . After reaching its absolute maximum in 1986, the global number of warheads began to decrease. The change did not start with SALT I because while the agreement limited the number of intercontinental ballistic missiles (ICBM) and submarine-launched ballistic missile (SLBM) forces, it failed to address limits on strategic bombers or warhead count leaving both sides able to continue the build up of their nuclear weapons. . It is the Intermediate-Range Nuclear Forces (INF) Treaty that was a landmark agreement that eliminated an entire class of weapons: the ground-launched ballistic and cruise missiles with ranges between 500 and 5,500 kilometers. The treaty entered into force in 1988 and due to its nature did not have an expiration date. Unfortunately, both sides&#39; concerns around compliance grew with time which also mirrored the overall decline in US-Russia relations, and, in 2014, the same year Russia invaded Ukraine and annexed Crimea, the US publicly alleged that Russia was violating the treaty. The US ultimately withdrew from the INF in 2019 de facto killing it. . Now, only the New START remains and it is set to expire in 2026. With modernization underway and with emergence of new technologies, such as the highly maneuverable hypersonic missiles, it is paramount for the US and Russia to negotiate a successor, or else risking welcoming a new 21st-century nuclear arms race. . plt.figure(figsize=(13,9)) plt.plot(warheads.Year, warheads.Total,color=&#39;lightgrey&#39;, label=&#39;Total Arsenal&#39;) plt.plot(warheads.Year, warheads.US,color=&#39;cornflowerblue&#39;, label=&#39;US&#39;) plt.plot(warheads.Year, warheads.Russia,color=&#39;chocolate&#39;, label=&#39;Soviet Union/Russia&#39;) plt.title(&#39;Strategic &amp; Nonstrategic Nuclear Arms Control Agreements b/w Russia and the US, 1945-2022&#39;) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Warheads&#39;) plt.axvline(x=1972, color=&#39;k&#39;, linestyle=&#39;--&#39;, linewidth=2) plt.text(1973, 70000, &#39;SALT I&#39;) plt.axvline(x=1988, color=&#39;k&#39;, linestyle=&#39;--&#39;, linewidth=2) plt.text(1989, 70000, &#39;INF&#39;) plt.axvline(x=1994, color=&#39;k&#39;, linestyle=&#39;--&#39;, linewidth=2) plt.text(1995, 70000, &#39;START I&#39;) plt.axvline(x=2003, color=&#39;k&#39;, linestyle=&#39;--&#39;, linewidth=2) plt.text(2004, 70000, &#39;SORT&#39;) plt.axvline(x=2011, color=&#39;k&#39;, linestyle=&#39;--&#39;, linewidth=2) plt.text(2012, 70000, &#39;New START&#39;) plt.legend() . &lt;matplotlib.legend.Legend at 0x7f4e58217d30&gt; . Nuclear Warhead Arsenal excluding Russia and the US, 1945-present . By excluding data pertaining to Russia and the US, the next graph gives a clearer idea about nuclear warhead holding states over time and where they stand today. China, for instance, acquired nuclear weapons in 1964 and has seen a steady rise in their number ever since. In September 2021, the news broke that 250 and possibly more long-range missile silos are being constructed in three locations, suggesting that China might considerably expand its nuclear arsenal in the near future. As a result, while a trilateral agreement between China, Russia, and the US is not a real possibility, strategic talks with the purpose to bring in more transparency around nuclear weapon development and use should be a priority for the US. . Another interesting case is an enfolding arms race between India and Pakistan. Neither have signed the NPT and India conducted its first nuclear weapon test in 1974. Later, in 1998, India and Pakistan began developing their nuclear arsenal and both countries&#39; number of weapons is continuously on the rise. . Israel is another country that never signed the NPT and maintains a policy of nuclear opacity, meaning that Israel does not confirm nor deny posessing nuclear weapons. Not only does it make it challenging to estimate Israel&#39;s arsenal, Western government avoid branding Israel a nuclear weapon holding state. . plt.figure(figsize=(13,9)) plt.plot(warheads.Year, warheads.China,color=&#39;skyblue&#39;, label=&#39;China&#39;) plt.plot(warheads.Year, warheads.France,color=&#39;steelblue&#39;, label=&#39;France&#39;) plt.plot(warheads.Year, warheads.UK,color=&#39;tomato&#39;, label=&#39;UK&#39;) plt.plot(warheads.Year, warheads[&#39;North Korea&#39;], &#39;c&#39;, label=&#39;North Korea&#39;) plt.plot(warheads.Year, warheads.Pakistan, &#39;m&#39;, label=&#39;Pakistan&#39;) plt.plot(warheads.Year, warheads.India, color=&#39;pink&#39;, label=&#39;India&#39;) plt.plot(warheads.Year, warheads.Israel,color=&#39;gold&#39;, label=&#39;Israel&#39;) plt.plot(warheads.Year, warheads[&#39;South Africa&#39;],color=&#39;yellowgreen&#39;, label=&#39;South Africa&#39;) plt.title(&#39;Nuclear Warhead Arsenal w/ exclusion of Russia and the US, 1945-2022&#39;) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Warheads&#39;) plt.legend() . &lt;matplotlib.legend.Legend at 0x7f4e58231820&gt; . The visualization below is a more interactive way of representing changes in global nuclear arsenals with an exclusion of Russia and the US. . year = [] country = [] count = [] for i,row in warheads.iterrows(): year.append(row[&#39;Year&#39;]) country.append(&#39;China&#39;) count.append(row[&#39;China&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;France&#39;) count.append(row[&#39;France&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;UK&#39;) count.append(row[&#39;UK&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;Pakistan&#39;) count.append(row[&#39;Pakistan&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;India&#39;) count.append(row[&#39;India&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;Israel&#39;) count.append(row[&#39;Israel&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;North Korea&#39;) count.append(row[&#39;North Korea&#39;]) year.append(row[&#39;Year&#39;]) country.append(&#39;South Africa&#39;) count.append(row[&#39;South Africa&#39;]) df2 = pd.DataFrame({&#39;year&#39;:year,&#39;country&#39;:country,&#39;count&#39;:count}) # make color scale pink_blue = alt.Scale(domain=(&#39;China&#39;, &#39;France&#39;, &#39;UK&#39;, &#39;Pakistan&#39;, &#39;India&#39;, &#39;Israel&#39;, &#39;North Korea&#39;, &#39;South Africa&#39;), range=[&quot;olivedrab&quot;, &quot;royalblue&quot;, &quot;orangered&quot;, &quot;mediumpurple&quot;, &quot;palevioletred&quot;, &quot;teal&quot;, &quot;darkorange&quot;, &quot;gold&quot;]) # make slider from 1945 - 2022 # based on year column, default value 2000 slider = alt.binding_range(min=1945, max=2022, step=1) select_year = alt.selection_single(name=&quot;year&quot;, fields=[&#39;year&#39;], bind=slider, init={&#39;year&#39;: 2000}) # make plot and link it to the slider source = df2 alt.Chart(source).mark_bar().encode( x=alt.X(&#39;country:N&#39;, title=None), y=alt.Y(&#39;count:Q&#39;, scale=alt.Scale(domain=(0, 600))), color=alt.Color(&#39;country:N&#39;, scale=pink_blue), column=&#39;year:O&#39; ).properties( width=300 ).add_selection( select_year ).transform_filter( select_year ) . Comparison of nuclear bombs yields: bombs dropped on Hiroshima and Nagasaki vs bombs of today . In August 1945, the US dropped two bombs, one on Hiroshima and one on Nagasaki only three days apart. Casualties in each of these cities have reached 140,000 by the end of that year. Together the bombs have destroyed 8 square miles of the two cities. Some of today&#39;s nuclear bombs, such as B83 (the largest in US arsenal right now), are almost 60 times larger than the Fat Man that was dropped on Nagasaki. If such a bomb was dropped on a large populous city like Los Angeles today, estimated fatalities number would reach 454,250 with hundreds of thousands more of those injured. A city like New York would see over 1,4 million fatalities in addition to 1,6 million injuries. . The threat of nuclear weapons use, however, does not only come from such high-yield (50+ kilotons of TNT) bombs. In 2020, the US Department of Defense issued a statement concerning the deployment of the new W76-2 low-yield (about 6 kilotons of TNT) submarine-launched ballistic missile (SLBM). In general, deployment of nuclear weapons proves a state&#39;s commitment to the strategy of detterence aimed at preventing the first use of nuclear weapons by credibly threatening a response that would inflict unacceptable damage in return. Critics of Washington&#39;s decision to deploy W76-2 SLBM argue that such a move does not aid deterrence and, on the contrary, makes a first nuclear strike much more likely. . bombs = pd.read_csv(&#39;data/bomb_yield.csv&#39;) . bomb_title = bombs.iloc[:, 0] indx = np.arange(len(bombs)) bombs.plot(kind=&#39;barh&#39;,figsize=(10, 7), legend=None) plt.title(&#39;Nuclear Bombs by Comparison: 1945 vs Today&#39;) plt.xlabel(&#39;Yield (kilotons TNT)&#39;) plt.ylabel(&#39;Nuclear Bomb&#39;) plt.yticks(indx, bomb_title) plt.xticks(np.arange(0, 2000, 250)) . ([&lt;matplotlib.axis.XTick at 0x7f4e58111460&gt;, &lt;matplotlib.axis.XTick at 0x7f4e58111430&gt;, &lt;matplotlib.axis.XTick at 0x7f4e5817dcd0&gt;, &lt;matplotlib.axis.XTick at 0x7f4e580a82e0&gt;, &lt;matplotlib.axis.XTick at 0x7f4e580a3460&gt;, &lt;matplotlib.axis.XTick at 0x7f4e5809c2e0&gt;, &lt;matplotlib.axis.XTick at 0x7f4e580a8820&gt;, &lt;matplotlib.axis.XTick at 0x7f4e580a8dc0&gt;], [Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;)]) . Discussion . While the last few decades have seen remarkable progress in the realm of arms control, the risk of nuclear war has not gone away and, more than that, the threat has reemerged in full force with Russia&#39;s recent invasion of Ukraine on February 24th, 2022. The US and Russia have seen sustained decline in relations following the end of the Cold War and yet both sides remained interested in placing limits on nuclear weapons. . At the present, the New START treaty is the last remaining agreement between Russia and the US. The two states have successfully extended it in 2021 until 2026 and negotiating New START treaty&#39;s successor is of major importance. After the extension was finalized, Russian Deputy Foreign Minister Sergei Ryabkov noted that &quot;We (Russia and the US) now have a significant amount of time in order to launch and hold profound bilateral talks on the whole set of issues that influence strategic stability, ensure security of our state for a long period ahead.&quot; President Biden sought to do just that with his bilateral Strategic Stability Dialogue. This initiative has now been halted following Russia&#39;s invasion of Ukraine and the future of arms control remains uncertain. . Currently, it is impossible to predice how the Russo-Ukrainian War is going to end and how domestic factors will shape each country&#39;s committment to arms control. As soon as it is possible, however, Strategic Stability Dialogue or something equivalent to it should be resumed in order for negotiations to take place. Russia and the US have found common ground before amidst deep distrust and vigorous cometition with each other, the two sides should be prepared to do so again to avoid the implications of a renewed nuclear arms race. .",
            "url": "https://yanademeshko.github.io/dh_nuclear_fp/fastpages/jupyter/2022/03/22/Final-Project.html",
            "relUrl": "/fastpages/jupyter/2022/03/22/Final-Project.html",
            "date": " • Mar 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yanademeshko.github.io/dh_nuclear_fp/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yanademeshko.github.io/dh_nuclear_fp/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yanademeshko.github.io/dh_nuclear_fp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yanademeshko.github.io/dh_nuclear_fp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}